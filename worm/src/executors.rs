//! Types that execute raw SQL within a DBMS.

use crate::sql::SqlRow;
use std::error::Error;

type ResultIter = Box<dyn Iterator<Item = SqlRow>>;

/// A type which can execute SQL.
pub trait SqlExecutor {
    /// Executes the supplied script
    fn execute_sql(&self, sql: &str) -> Result<ResultIter, SqlExecutionError>;
}

/// An error that occurs while executing SQL generated by worm.
#[derive(Debug)]
pub enum SqlExecutionError {
    /// Another non-specified error that occurs while executing the SQL within
    /// the DBMS.
    Other {
        /// The underlying error.
        err: Box<dyn Error>,
    },
}

impl<E> From<E> for SqlExecutionError
where
    E: Error + 'static,
{
    fn from(err: E) -> Self {
        let err = Box::new(err);
        Self::Other { err }
    }
}
