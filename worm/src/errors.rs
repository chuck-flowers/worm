//! Types for representing errors in the worm framework.

use core::fmt::Display;
use core::fmt::Formatter;
use core::fmt::Result as FmtResult;
use std::error::Error;

/// Represents all types of errors that can occur in worm.
#[derive(Debug)]
pub enum WormError {
    /// An error that occurs while establishing a connection to a specified
    /// database.
    ConnectionError(ConnectionError),
    /// An error that occurs while executing SQL generated by worm.
    SqlExecutionError(SqlExecutionError),
    /// An error that occurs while converting the DBMS specific row
    /// representation to the user-defined record type.
    RowConversionError(RowConversionError),
}

impl Display for WormError {
    fn fmt(&self, f: &mut Formatter<'_>) -> FmtResult {
        match self {
            WormError::ConnectionError(conn_err) => conn_err.fmt(f),
            WormError::SqlExecutionError(sql_error) => write!(
                f,
                "There was a problem executing the provided SQL: {}",
                sql_error
            ),
            WormError::RowConversionError(conversion_error) => {
                write!(
                    f,
                    "There was a problem converting a row: {}",
                    conversion_error
                )
            }
        }
    }
}

impl Error for WormError {
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        match self {
            WormError::ConnectionError(conn_err) => Some(conn_err),
            WormError::SqlExecutionError(sql_err) => Some(sql_err),
            WormError::RowConversionError(conversion_err) => Some(conversion_err),
        }
    }
}

impl From<ConnectionError> for WormError {
    fn from(err: ConnectionError) -> Self {
        Self::ConnectionError(err)
    }
}

impl From<SqlExecutionError> for WormError {
    fn from(err: SqlExecutionError) -> Self {
        Self::SqlExecutionError(err)
    }
}

impl From<RowConversionError> for WormError {
    fn from(err: RowConversionError) -> Self {
        Self::RowConversionError(err)
    }
}

/// An error that occurs while connecting to a specified database.
#[derive(Debug)]
pub struct ConnectionError {
    connection_string: String,
}

impl ConnectionError {
    /// Creates a new connection error.
    pub fn new(connection_string: String) -> Self {
        Self { connection_string }
    }
}

impl Display for ConnectionError {
    fn fmt(&self, f: &mut Formatter<'_>) -> FmtResult {
        write!(
            f,
            "There was a problem connecting to the databse specified by {}",
            &self.connection_string
        )
    }
}

impl Error for ConnectionError {}

/// An error that occurs while executing SQL generated by worm.
#[derive(Debug)]
pub enum SqlExecutionError {
    /// Another non-specified error that occurs while executing the SQL within
    /// the DBMS.
    Other {
        /// The underlying error.
        err: Box<dyn Error>,
    },
}

impl Display for SqlExecutionError {
    fn fmt(&self, f: &mut Formatter<'_>) -> FmtResult {
        match self {
            SqlExecutionError::Other { err } => {
                write!(f, "There was a problem executing the SQL: {}", err)
            }
        }
    }
}

impl Error for SqlExecutionError {
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        match self {
            SqlExecutionError::Other { err } => Some(err.as_ref()),
        }
    }
}

impl<E> From<Box<E>> for SqlExecutionError
where
    E: Error + 'static,
{
    fn from(err: Box<E>) -> Self {
        let err = Box::new(err);
        Self::Other { err }
    }
}

/// An error occured while attempting to convert a [SqlRow] into a record type.
#[derive(Debug)]
pub enum RowConversionError {
    /// An error that occurrs while converting the DBMS specific row
    /// representation into an abstract Worm representation.
    RawRowConversionFailure(RawRowConversionError),
    /// An error that occurs while converting a field's [SqlValue] into a
    /// concrete Rust type.
    FieldConversionError(FieldConversionError),
}

impl Display for RowConversionError {
    fn fmt(&self, f: &mut Formatter<'_>) -> FmtResult {
        match self {
            RowConversionError::RawRowConversionFailure(raw_err) => raw_err.fmt(f),
            RowConversionError::FieldConversionError(field_err) => field_err.fmt(f),
        }
    }
}

impl Error for RowConversionError {
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        match self {
            RowConversionError::RawRowConversionFailure(raw_err) => Some(raw_err),
            RowConversionError::FieldConversionError(field_err) => Some(field_err),
        }
    }
}

impl From<RawRowConversionError> for RowConversionError {
    fn from(err: RawRowConversionError) -> Self {
        Self::RawRowConversionFailure(err)
    }
}

impl From<FieldConversionError> for RowConversionError {
    fn from(err: FieldConversionError) -> Self {
        Self::FieldConversionError(err)
    }
}

/// An error that occurs while translating a DBMS specific row representation
/// into a [SqlRow].
#[derive(Debug)]
pub enum RawRowConversionError {
    /// A DBMS column type has no worm equivalent [SqlValue].
    UnsupportedType {
        /// The name of the column which has the unsupported type.
        column_name: String,
        /// The name of the type which is not supported.
        type_name: Option<String>,
    },
    /// Another unspecified error that occurred.
    Other {
        /// The error that occurred.
        err: Box<dyn Error>,
    },
}

impl Display for RawRowConversionError {
    fn fmt(&self, f: &mut Formatter) -> FmtResult {
        match self {
            RawRowConversionError::UnsupportedType {
                column_name,
                type_name: Some(type_name),
            } => write!(
                f,
                "Unable to convert the value of column '{}' because its data type '{}' is unsupported.",
                column_name,
                type_name
            ),
            RawRowConversionError::UnsupportedType {
                column_name,
                type_name: None,
            } => write!(
                f,
                "Unable to convert the value of column '{}' because its data type is unsupported.",
                column_name
            ),
            RawRowConversionError::Other { err } => {
                write!(f, "An error occured while converting the DBMS-specific SQL representation: {}", err)
            }
        }
    }
}

impl Error for RawRowConversionError {}

/// An error that can occur while converting a [SqlValue] into a concrete Rust
/// type.
#[derive(Debug, Eq, PartialEq)]
pub enum FieldConversionError {
    /// The [SqlValue] variant and the target Rust type are
    /// incompatible.
    IncorrectType,
    /// The type of value is compatible, but it's value is out of range of the
    /// Rust type.
    ValueOutOfBounds,
}

impl Display for FieldConversionError {
    fn fmt(&self, f: &mut Formatter) -> FmtResult {
        match self {
            FieldConversionError::IncorrectType => write!(
                f,
                "The type of the SQL column is not compatible with the Rust type."
            ),
            FieldConversionError::ValueOutOfBounds => write!(
                f,
                "The value of the the SQL column is not in the bounds of the Rust type."
            ),
        }
    }
}

impl Error for FieldConversionError {}
